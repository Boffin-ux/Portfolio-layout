(()=>{"use strict";var __webpack_modules__={240:()=>{eval("\n;// CONCATENATED MODULE: ./src/modules/accordeon.js\nconst accordeon = () => {\r\n   const featureList = document.querySelector('.feature-list');\r\n   const featureLinks = document.querySelectorAll('.feature__link');\r\n   const featureSubs = document.querySelectorAll('.feature-sub');\r\n\r\n   const activeItem = e => {\r\n      e.preventDefault();\r\n      const target = e.target;\r\n      if (target.closest('.feature__link') && !target.closest('.feature__link_active')) {\r\n         const getParent = target.closest('.feature__link').parentNode;\r\n         const getLink = getParent.querySelector('.feature__link');\r\n         const getSub = getParent.querySelector('.feature-sub');\r\n         featureLinks.forEach(item => item.classList.remove('feature__link_active'));\r\n         featureSubs.forEach(item => item.classList.add('hidden'));\r\n         getLink.classList.add('feature__link_active');\r\n         getSub.classList.remove('hidden');\r\n      }\r\n   };\r\n\r\n   featureList.addEventListener('click', activeItem);\r\n};\r\n\r\n/* harmony default export */ const modules_accordeon = (accordeon);\n;// CONCATENATED MODULE: ./src/modules/countTimer.js\nconst countTimer = deadline => {\r\n\r\n   const getTimer = document.querySelector('.timer__time');\r\n\r\n   const getTimeRemaining = () => {\r\n      const dateStop = new Date(deadline),\r\n         dateNow = new Date().getTime(),\r\n         timerRemaining = (dateStop - dateNow) / 1000,\r\n         seconds = Math.floor(timerRemaining % 60),\r\n         minutes = Math.floor((timerRemaining / 60) % 60),\r\n         hours = Math.floor(timerRemaining / 60 / 60);\r\n      return { timerRemaining, hours, minutes, seconds };\r\n   };\r\n   const addZero = num => {\r\n      if (num >= 0 && num <= 9) {\r\n         return `0${num}`;\r\n      } else {\r\n         return num;\r\n      }\r\n   };\r\n   const updateClock = () => {\r\n      const timer = getTimeRemaining();\r\n      if (timer.timerRemaining > 0) {\r\n         getTimer.innerHTML = `${addZero(timer.hours)}:${addZero(timer.minutes)}:${addZero(timer.seconds)}`;\r\n      } else {\r\n         getTimer.textContent = `${'00:00:00'}`;\r\n         clearInterval(idInterval);\r\n      }\r\n   };\r\n   const idInterval = setInterval(updateClock, 1000);\r\n   updateClock();\r\n};\r\n\r\n/* harmony default export */ const modules_countTimer = (countTimer);\r\n\n;// CONCATENATED MODULE: ./src/modules/menu.js\nconst menu = () => {\r\n   const humburgerMenu = document.querySelector('.humburger-menu');\r\n   const menu = document.querySelector('.menu');\r\n\r\n   const openMenu = () => {\r\n      menu.style.top = '0';\r\n      document.addEventListener('click', closeMenu);\r\n   };\r\n   const closeMenu = e => {\r\n      if (!e.target.closest('.menu-list') && !e.target.closest('.humburger-menu') || e.target.closest('.menu-list__item')) {\r\n         menu.style.top = '-300px';\r\n         document.removeEventListener('click', closeMenu);\r\n      }\r\n   };\r\n   humburgerMenu.addEventListener('click', openMenu);\r\n};\r\n\r\n/* harmony default export */ const modules_menu = (menu);\n;// CONCATENATED MODULE: ./src/modules/blockScrolled.js\nconst disableScroll = () => {\r\n   document.body.dataset.scrollY = window.scrollY;\r\n\r\n   const scrollWidth = window.innerWidth - document.body.offsetWidth;\r\n\r\n   document.body.style.cssText = `\r\n      position: fixed;\r\n      top: -${window.scrollY}px;\r\n      left: 0;\r\n      width: 100%;\r\n      overflow: hidden;\r\n      height: 100vh;\r\n      padding-right: ${scrollWidth}px;\r\n   `;\r\n};\r\nconst enableScroll = () => {\r\n   document.body.style.cssText = '';\r\n   window.scroll({\r\n      top: document.body.dataset.scrollY\r\n   });\r\n};\r\n\r\n\r\n\n;// CONCATENATED MODULE: ./src/modules/postData.js\nconst postData = async cart => {\r\n   try {\r\n      const response = await fetch('https://jsonplaceholder.typicode.com/posts', {\r\n         method: 'POST',\r\n         body: JSON.stringify(cart),\r\n         headers: {\r\n            'Content-type': 'application/json; charset=UTF-8',\r\n         },\r\n      });\r\n      const resp = await response.json();\r\n      return resp;\r\n   } catch (err) {\r\n      console.error(err);\r\n   }\r\n};\r\n\r\n/* harmony default export */ const modules_postData = (postData);\r\n\n;// CONCATENATED MODULE: ./src/modules/clearForm.js\nconst clearForm = (inputs, sendMessage, modal) => {\r\n   inputs.forEach(item => item.value = '');\r\n   sendMessage ? sendMessage.remove() : false;\r\n   modal ? modal() : false;\r\n};\r\n/* harmony default export */ const modules_clearForm = (clearForm);\n;// CONCATENATED MODULE: ./src/modules/checkForm.js\n\r\n\r\n\r\nconst checkForm = async (e, form, inputs, modal) => {\r\n   e.preventDefault();\r\n   let orderMessage = document.querySelector('.order-message');\r\n   if (!orderMessage) {\r\n      const addMessage = `<span class=\"order-message\"><span>`;\r\n      form.insertAdjacentHTML('beforeEnd', addMessage);\r\n      orderMessage = document.querySelector('.order-message');\r\n      orderMessage.style.display = \"block\";\r\n      orderMessage.style.textAlign = \"center\";\r\n      orderMessage.style.fontSize = \"20px\";\r\n      orderMessage.style.padding = \"25px\";\r\n   }\r\n   const checkInput = () => {\r\n      return inputs.every(item => item.value !== '');\r\n   };\r\n   if (checkInput()) {\r\n      await modules_postData();\r\n      orderMessage.classList.add('active');\r\n      orderMessage.textContent = `Заявка успешно отправлена!`;\r\n      setTimeout(() => {\r\n         modules_clearForm(inputs, orderMessage, modal);\r\n      }, 2000);\r\n   } else {\r\n      orderMessage.textContent = `Заполните все поля!`;\r\n      orderMessage.classList.add('active');\r\n   }\r\n};\r\n/* harmony default export */ const modules_checkForm = (checkForm);\n;// CONCATENATED MODULE: ./src/modules/modal.js\n\r\n\r\n\r\n\r\nconst modal = () => {\r\n   const getModal = document.querySelector('.modal');\r\n   const mainButton = document.querySelector('.main__button');\r\n   const modalInputs = document.querySelectorAll('.modal__input');\r\n   const form = document.querySelector('.modal__form');\r\n\r\n   const closeModal = () => {\r\n      getModal.classList.add('hidden');\r\n      enableScroll();\r\n   };\r\n   const sendForm = async e => {\r\n      await modules_checkForm(e, form, [...modalInputs], closeModal);\r\n   };\r\n   const controlModal = e => {\r\n      const target = e.target;\r\n      if (target.closest('.modal__close') || target.closest('.overlay')) {\r\n         const orderMessage = document.querySelector('.order-message');\r\n         modules_clearForm([...modalInputs], orderMessage, closeModal);\r\n      }\r\n      if (target.closest('.modal__button')) {\r\n         sendForm(e);\r\n      }\r\n   };\r\n   const openModal = e => {\r\n      e.preventDefault();\r\n      disableScroll();\r\n      getModal.classList.remove('hidden');\r\n      getModal.addEventListener('click', controlModal);\r\n   };\r\n\r\n   mainButton.addEventListener('click', openModal);\r\n};\r\n\r\n/* harmony default export */ const modules_modal = (modal);\n;// CONCATENATED MODULE: ./node_modules/seamless-scroll-polyfill/lib/common.js\nconst checkBehavior = (behavior) => {\n    return behavior === undefined || behavior === \"auto\" || behavior === \"instant\" || behavior === \"smooth\";\n};\nfunction elementScrollXY(x, y) {\n    this.scrollLeft = x;\n    this.scrollTop = y;\n}\nconst failedExecute = (method, object, reason = \"cannot convert to dictionary.\") => `Failed to execute '${method}' on '${object}': ${reason}`;\nconst failedExecuteInvalidEnumValue = (method, object, value) => failedExecute(method, object, `The provided value '${value}' is not a valid enum value of type ScrollBehavior.`);\n/* eslint-disable */\nconst backupMethod = (proto, method, fallback) => {\n    var _a;\n    const backup = `__SEAMLESS.BACKUP$${method}`;\n    if (!proto[backup] && proto[method] && !((_a = proto[method]) === null || _a === void 0 ? void 0 : _a.__isPolyfill)) {\n        proto[backup] = proto[method];\n    }\n    return proto[backup] || fallback;\n};\n/* eslint-enable */\nconst isObject = (value) => {\n    const type = typeof value;\n    return value !== null && (type === \"object\" || type === \"function\");\n};\nconst isScrollBehaviorSupported = () => \"scrollBehavior\" in window.document.documentElement.style;\nconst markPolyfill = (method) => {\n    Object.defineProperty(method, \"__isPolyfill\", { value: true });\n};\nconst modifyPrototypes = (prop, func) => {\n    markPolyfill(func);\n    [HTMLElement.prototype, SVGElement.prototype, Element.prototype].forEach((prototype) => {\n        backupMethod(prototype, prop);\n        prototype[prop] = func;\n    });\n};\n/**\n * - On Chrome and Firefox, document.scrollingElement will return the <html> element.\n * - Safari, document.scrollingElement will return the <body> element.\n * - On Edge, document.scrollingElement will return the <body> element.\n * - IE11 does not support document.scrollingElement, but you can assume its <html>.\n */\nconst scrollingElement = (element) => element.ownerDocument.scrollingElement || element.ownerDocument.documentElement;\n//# sourceMappingURL=common.js.map\n;// CONCATENATED MODULE: ./node_modules/seamless-scroll-polyfill/lib/scroll-step.js\nconst ease = (k) => {\n    return 0.5 * (1 - Math.cos(Math.PI * k));\n};\n/* eslint-disable */\nfunction now() {\n    var _a;\n    let fn;\n    if ((_a = window.performance) === null || _a === void 0 ? void 0 : _a.now) {\n        fn = () => window.performance.now();\n    }\n    else {\n        fn = () => window.Date.now();\n    }\n    // @ts-ignore\n    now = fn;\n    return fn();\n}\n/* eslint-enable */\nconst DURATION = 500;\nconst step = (context) => {\n    const currentTime = now();\n    const elapsed = (currentTime - context.timeStamp) / (context.duration || DURATION);\n    if (elapsed > 1) {\n        context.method(context.targetX, context.targetY);\n        context.callback();\n        return;\n    }\n    const value = (context.timingFunc || ease)(elapsed);\n    const currentX = context.startX + (context.targetX - context.startX) * value;\n    const currentY = context.startY + (context.targetY - context.startY) * value;\n    context.method(currentX, currentY);\n    context.rafId = window.requestAnimationFrame(() => {\n        step(context);\n    });\n};\n//# sourceMappingURL=scroll-step.js.map\n;// CONCATENATED MODULE: ./node_modules/seamless-scroll-polyfill/lib/scroll.js\n\n\n// https://drafts.csswg.org/cssom-view/#normalize-non-finite-values\nconst nonFinite = (value) => {\n    if (!isFinite(value)) {\n        return 0;\n    }\n    return Number(value);\n};\nconst isConnected = (node) => {\n    var _a;\n    return ((_a = node.isConnected) !== null && _a !== void 0 ? _a : (!node.ownerDocument ||\n        // eslint-disable-next-line no-bitwise\n        !(node.ownerDocument.compareDocumentPosition(node) & /** DOCUMENT_POSITION_DISCONNECTED */ 1)));\n};\nconst scrollWithOptions = (element, options, config) => {\n    var _a, _b;\n    if (!isConnected(element)) {\n        return;\n    }\n    const startX = element.scrollLeft;\n    const startY = element.scrollTop;\n    const targetX = nonFinite((_a = options.left) !== null && _a !== void 0 ? _a : startX);\n    const targetY = nonFinite((_b = options.top) !== null && _b !== void 0 ? _b : startY);\n    if (targetX === startX && targetY === startY) {\n        return;\n    }\n    const fallback = backupMethod(HTMLElement.prototype, \"scroll\", elementScrollXY);\n    const method = backupMethod(Object.getPrototypeOf(element), \"scroll\", fallback).bind(element);\n    if (options.behavior !== \"smooth\") {\n        method(targetX, targetY);\n        return;\n    }\n    const removeEventListener = () => {\n        window.removeEventListener(\"wheel\", cancelScroll);\n        window.removeEventListener(\"touchmove\", cancelScroll);\n    };\n    const context = Object.assign(Object.assign({}, config), { timeStamp: now(), startX,\n        startY,\n        targetX,\n        targetY, rafId: 0, method, callback: removeEventListener });\n    const cancelScroll = () => {\n        window.cancelAnimationFrame(context.rafId);\n        removeEventListener();\n    };\n    window.addEventListener(\"wheel\", cancelScroll, {\n        passive: true,\n        once: true,\n    });\n    window.addEventListener(\"touchmove\", cancelScroll, {\n        passive: true,\n        once: true,\n    });\n    step(context);\n};\nconst isWindow = (obj) => obj.window === obj;\nconst createScroll = (scrollName) => (target, scrollOptions, config) => {\n    const [element, scrollType] = isWindow(target)\n        ? [scrollingElement(target.document.documentElement), \"Window\"]\n        : [target, \"Element\"];\n    const options = scrollOptions !== null && scrollOptions !== void 0 ? scrollOptions : {};\n    if (!isObject(options)) {\n        throw new TypeError(failedExecute(scrollName, scrollType));\n    }\n    if (!checkBehavior(options.behavior)) {\n        throw new TypeError(failedExecuteInvalidEnumValue(scrollName, scrollType, options.behavior));\n    }\n    if (scrollName === \"scrollBy\") {\n        options.left = nonFinite(options.left) + element.scrollLeft;\n        options.top = nonFinite(options.top) + element.scrollTop;\n    }\n    scrollWithOptions(element, options, config);\n};\nconst scroll_scroll = /* #__PURE__ */ createScroll(\"scroll\");\nconst scrollTo = /* #__PURE__ */ (/* unused pure expression or super */ null && (createScroll(\"scrollTo\")));\nconst scrollBy = /* #__PURE__ */ (/* unused pure expression or super */ null && (createScroll(\"scrollBy\")));\nconst elementScroll = scroll_scroll;\nconst elementScrollTo = (/* unused pure expression or super */ null && (scrollTo));\nconst elementScrollBy = (/* unused pure expression or super */ null && (scrollBy));\nconst windowScroll = (/* unused pure expression or super */ null && (scroll_scroll));\nconst windowScrollTo = (/* unused pure expression or super */ null && (scrollTo));\nconst windowScrollBy = (/* unused pure expression or super */ null && (scrollBy));\n//# sourceMappingURL=scroll.js.map\n;// CONCATENATED MODULE: ./node_modules/seamless-scroll-polyfill/lib/scrollIntoView.js\n/* eslint-disable no-bitwise */\n\n\n// https://drafts.csswg.org/css-writing-modes-4/#block-flow\nconst normalizeWritingMode = (writingMode) => {\n    switch (writingMode) {\n        case \"horizontal-tb\":\n        case \"lr\":\n        case \"lr-tb\":\n        case \"rl\":\n        case \"rl-tb\":\n            return 0 /* HorizontalTb */;\n        case \"vertical-rl\":\n        case \"tb\":\n        case \"tb-rl\":\n            return 1 /* VerticalRl */;\n        case \"vertical-lr\":\n        case \"tb-lr\":\n            return 2 /* VerticalLr */;\n        case \"sideways-rl\":\n            return 3 /* SidewaysRl */;\n        case \"sideways-lr\":\n            return 4 /* SidewaysLr */;\n    }\n    return 0 /* HorizontalTb */;\n};\nconst calcPhysicalAxis = (writingMode, isLTR, hPos, vPos) => {\n    /**  0b{vertical}{horizontal}  0: normal, 1: reverse */\n    let layout = 0b00;\n    /**\n     * WritingMode.VerticalLr: ↓→\n     * | 1 | 4 |   |\n     * | 2 | 5 |   |\n     * | 3 |   |   |\n     *\n     * RTL: ↑→\n     * | 3 |   |   |\n     * | 2 | 5 |   |\n     * | 1 | 4 |   |\n     */\n    if (!isLTR) {\n        layout ^= 2 /* ReverseVertical */;\n    }\n    switch (writingMode) {\n        /**\n         * ↓→\n         * | 1 | 2 | 3 |\n         * | 4 | 5 |   |\n         * |   |   |   |\n         *\n         * RTL: ↓←\n         * | 3 | 2 | 1 |\n         * |   | 5 | 4 |\n         * |   |   |   |\n         */\n        case 0 /* HorizontalTb */:\n            // swap horizontal and vertical\n            layout = (layout >> 1) | ((layout & 1) << 1);\n            [hPos, vPos] = [vPos, hPos];\n            break;\n        /**\n         * ↓←\n         * |   | 4 | 1 |\n         * |   | 5 | 2 |\n         * |   |   | 3 |\n         *\n         * RTL: ↑←\n         * |   |   | 3 |\n         * |   | 5 | 2 |\n         * |   | 4 | 1 |\n         */\n        case 1 /* VerticalRl */:\n        case 3 /* SidewaysRl */:\n            //  reverse horizontal\n            layout ^= 1 /* ReverseHorizontal */;\n            break;\n        /**\n         * ↑→\n         * | 3 |   |   |\n         * | 2 | 5 |   |\n         * | 1 | 4 |   |\n         *\n         * RTL: ↓→\n         * | 1 | 4 |   |\n         * | 2 | 5 |   |\n         * | 3 |   |   |\n         */\n        case 4 /* SidewaysLr */:\n            // reverse vertical\n            layout ^= 2 /* ReverseVertical */;\n            break;\n    }\n    return [layout, hPos, vPos];\n};\nconst isXReversed = (computedStyle) => {\n    const layout = calcPhysicalAxis(normalizeWritingMode(computedStyle.writingMode), computedStyle.direction !== \"rtl\", undefined, undefined)[0];\n    return (layout & 1) === 1;\n};\n// https://source.chromium.org/chromium/chromium/src/+/main:third_party/blink/renderer/core/dom/element.cc;l=1097-1189;drc=6a7533d4a1e9f2372223a9d912a9e53a6fa35ae0\nconst toPhysicalAlignment = (options, writingMode, isLTR) => {\n    const [layout, hPos, vPos] = calcPhysicalAxis(writingMode, isLTR, options.block || \"start\", options.inline || \"nearest\");\n    return [hPos, vPos].map((value, index) => {\n        switch (value) {\n            case \"center\":\n                return 1 /* CenterAlways */;\n            case \"nearest\":\n                return 0 /* ToEdgeIfNeeded */;\n            default: {\n                const reverse = (layout >> index) & 1;\n                return (value === \"start\") === !reverse ? 2 /* LeftOrTop */ : 3 /* RightOrBottom */;\n            }\n        }\n    });\n};\n// code from stipsan/compute-scroll-into-view\n// https://github.com/stipsan/compute-scroll-into-view/blob/5396c6b78af5d0bbce11a7c4e93cc3146546fcd3/src/index.ts\n/**\n * Find out which edge to align against when logical scroll position is \"nearest\"\n * Interesting fact: \"nearest\" works similarily to \"if-needed\", if the element is fully visible it will not scroll it\n *\n * Legends:\n * ┌────────┐ ┏ ━ ━ ━ ┓\n * │ target │   frame\n * └────────┘ ┗ ━ ━ ━ ┛\n */\nconst mapNearest = (align, scrollingEdgeStart, scrollingEdgeEnd, scrollingSize, elementEdgeStart, elementEdgeEnd, elementSize) => {\n    if (align !== 0 /* ToEdgeIfNeeded */) {\n        return align;\n    }\n    /**\n     * If element edge A and element edge B are both outside scrolling box edge A and scrolling box edge B\n     *\n     *          ┌──┐\n     *        ┏━│━━│━┓\n     *          │  │\n     *        ┃ │  │ ┃        do nothing\n     *          │  │\n     *        ┗━│━━│━┛\n     *          └──┘\n     *\n     *  If element edge C and element edge D are both outside scrolling box edge C and scrolling box edge D\n     *\n     *    ┏ ━ ━ ━ ━ ┓\n     *   ┌───────────┐\n     *   │┃         ┃│        do nothing\n     *   └───────────┘\n     *    ┗ ━ ━ ━ ━ ┛\n     */\n    if ((elementEdgeStart < scrollingEdgeStart && elementEdgeEnd > scrollingEdgeEnd) ||\n        (elementEdgeStart > scrollingEdgeStart && elementEdgeEnd < scrollingEdgeEnd)) {\n        return null;\n    }\n    /**\n     * If element edge A is outside scrolling box edge A and element height is less than scrolling box height\n     *\n     *          ┌──┐\n     *        ┏━│━━│━┓         ┏━┌━━┐━┓\n     *          └──┘             │  │\n     *  from  ┃      ┃     to  ┃ └──┘ ┃\n     *\n     *        ┗━ ━━ ━┛         ┗━ ━━ ━┛\n     *\n     * If element edge B is outside scrolling box edge B and element height is greater than scrolling box height\n     *\n     *        ┏━ ━━ ━┓         ┏━┌━━┐━┓\n     *                           │  │\n     *  from  ┃ ┌──┐ ┃     to  ┃ │  │ ┃\n     *          │  │             │  │\n     *        ┗━│━━│━┛         ┗━│━━│━┛\n     *          │  │             └──┘\n     *          │  │\n     *          └──┘\n     *\n     * If element edge C is outside scrolling box edge C and element width is less than scrolling box width\n     *\n     *       from                 to\n     *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n     *  ┌───┐                 ┌───┐\n     *  │ ┃ │       ┃         ┃   │     ┃\n     *  └───┘                 └───┘\n     *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n     *\n     * If element edge D is outside scrolling box edge D and element width is greater than scrolling box width\n     *\n     *       from                 to\n     *    ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n     *        ┌───────────┐   ┌───────────┐\n     *    ┃   │     ┃     │   ┃         ┃ │\n     *        └───────────┘   └───────────┘\n     *    ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n     */\n    if ((elementEdgeStart <= scrollingEdgeStart && elementSize <= scrollingSize) ||\n        (elementEdgeEnd >= scrollingEdgeEnd && elementSize >= scrollingSize)) {\n        return 2 /* LeftOrTop */;\n    }\n    /**\n     * If element edge B is outside scrolling box edge B and element height is less than scrolling box height\n     *\n     *        ┏━ ━━ ━┓         ┏━ ━━ ━┓\n     *\n     *  from  ┃      ┃     to  ┃ ┌──┐ ┃\n     *          ┌──┐             │  │\n     *        ┗━│━━│━┛         ┗━└━━┘━┛\n     *          └──┘\n     *\n     * If element edge A is outside scrolling box edge A and element height is greater than scrolling box height\n     *\n     *          ┌──┐\n     *          │  │\n     *          │  │             ┌──┐\n     *        ┏━│━━│━┓         ┏━│━━│━┓\n     *          │  │             │  │\n     *  from  ┃ └──┘ ┃     to  ┃ │  │ ┃\n     *                           │  │\n     *        ┗━ ━━ ━┛         ┗━└━━┘━┛\n     *\n     * If element edge C is outside scrolling box edge C and element width is greater than scrolling box width\n     *\n     *           from                 to\n     *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n     *  ┌───────────┐           ┌───────────┐\n     *  │     ┃     │   ┃       │ ┃         ┃\n     *  └───────────┘           └───────────┘\n     *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n     *\n     * If element edge D is outside scrolling box edge D and element width is less than scrolling box width\n     *\n     *           from                 to\n     *        ┏ ━ ━ ━ ━ ┓         ┏ ━ ━ ━ ━ ┓\n     *                ┌───┐             ┌───┐\n     *        ┃       │ ┃ │       ┃     │   ┃\n     *                └───┘             └───┘\n     *        ┗ ━ ━ ━ ━ ┛         ┗ ━ ━ ━ ━ ┛\n     *\n     */\n    if ((elementEdgeEnd > scrollingEdgeEnd && elementSize < scrollingSize) ||\n        (elementEdgeStart < scrollingEdgeStart && elementSize > scrollingSize)) {\n        return 3 /* RightOrBottom */;\n    }\n    return null;\n};\nconst canOverflow = (overflow) => {\n    return overflow !== \"visible\" && overflow !== \"clip\";\n};\nconst getFrameElement = (element) => {\n    var _a;\n    try {\n        return ((_a = element.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.frameElement) || null;\n    }\n    catch (_b) {\n        return null;\n    }\n};\nconst isScrollable = (element, computedStyle) => {\n    if (element.clientHeight < element.scrollHeight || element.clientWidth < element.scrollWidth) {\n        return (canOverflow(computedStyle.overflowY) ||\n            canOverflow(computedStyle.overflowX) ||\n            element === scrollingElement(element));\n    }\n    return false;\n};\nconst parentElement = (element) => {\n    const pNode = element.parentNode;\n    const pElement = element.parentElement;\n    if (pElement === null && pNode !== null) {\n        if (pNode.nodeType === /** Node.DOCUMENT_FRAGMENT_NODE */ 11) {\n            return pNode.host;\n        }\n        if (pNode.nodeType === /** Node.DOCUMENT_NODE */ 9) {\n            return getFrameElement(element);\n        }\n    }\n    return pElement;\n};\nconst clamp = (value, min, max) => {\n    if (value < min) {\n        return min;\n    }\n    if (value > max) {\n        return max;\n    }\n    return value;\n};\nconst getSupportedScrollMarginProperty = (ownerDocument) => {\n    // Webkit uses \"scroll-snap-margin\" https://bugs.webkit.org/show_bug.cgi?id=189265.\n    return [\"scroll-margin\", \"scroll-snap-margin\"].filter((property) => property in ownerDocument.documentElement.style)[0];\n};\nconst getElementScrollSnapArea = (element, elementRect, computedStyle) => {\n    const { top, right, bottom, left } = elementRect;\n    const scrollProperty = getSupportedScrollMarginProperty(element.ownerDocument);\n    if (!scrollProperty) {\n        return [top, right, bottom, left];\n    }\n    const scrollMarginValue = (edge) => {\n        const value = computedStyle.getPropertyValue(`${scrollProperty}-${edge}`);\n        return parseInt(value, 10) || 0;\n    };\n    return [\n        top - scrollMarginValue(\"top\"),\n        right + scrollMarginValue(\"right\"),\n        bottom + scrollMarginValue(\"bottom\"),\n        left - scrollMarginValue(\"left\"),\n    ];\n};\nconst calcAlignEdge = (align, start, end) => {\n    switch (align) {\n        case 1 /* CenterAlways */:\n            return (start + end) / 2;\n        case 3 /* RightOrBottom */:\n            return end;\n        case 2 /* LeftOrTop */:\n        case 0 /* ToEdgeIfNeeded */:\n            return start;\n    }\n};\nconst getFrameViewport = (frame, frameRect) => {\n    var _a, _b, _c;\n    const visualViewport = (_a = frame.ownerDocument.defaultView) === null || _a === void 0 ? void 0 : _a.visualViewport;\n    const [x, y, width, height] = frame === scrollingElement(frame)\n        ? [0, 0, (_b = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.width) !== null && _b !== void 0 ? _b : frame.clientWidth, (_c = visualViewport === null || visualViewport === void 0 ? void 0 : visualViewport.height) !== null && _c !== void 0 ? _c : frame.clientHeight]\n        : [frameRect.left, frameRect.top, frame.clientWidth, frame.clientHeight];\n    const left = x + frame.clientLeft;\n    const top = y + frame.clientTop;\n    const right = left + width;\n    const bottom = top + height;\n    return [top, right, bottom, left];\n};\nconst computeScrollIntoView = (element, options) => {\n    // Collect all the scrolling boxes, as defined in the spec: https://drafts.csswg.org/cssom-view/#scrolling-box\n    const actions = [];\n    let ownerDocument = element.ownerDocument;\n    let ownerWindow = ownerDocument.defaultView;\n    if (!ownerWindow) {\n        return actions;\n    }\n    const computedStyle = window.getComputedStyle(element);\n    const isLTR = computedStyle.direction !== \"rtl\";\n    const writingMode = normalizeWritingMode(computedStyle.writingMode ||\n        computedStyle.getPropertyValue(\"-webkit-writing-mode\") ||\n        computedStyle.getPropertyValue(\"-ms-writing-mode\"));\n    const [alignH, alignV] = toPhysicalAlignment(options, writingMode, isLTR);\n    let [top, right, bottom, left] = getElementScrollSnapArea(element, element.getBoundingClientRect(), computedStyle);\n    for (let frame = parentElement(element); frame !== null; frame = parentElement(frame)) {\n        if (ownerDocument !== frame.ownerDocument) {\n            ownerDocument = frame.ownerDocument;\n            ownerWindow = ownerDocument.defaultView;\n            if (!ownerWindow) {\n                break;\n            }\n            const { left: dX, top: dY } = frame.getBoundingClientRect();\n            top += dY;\n            right += dX;\n            bottom += dY;\n            left += dX;\n        }\n        const frameStyle = ownerWindow.getComputedStyle(frame);\n        if (frameStyle.position === \"fixed\") {\n            break;\n        }\n        if (!isScrollable(frame, frameStyle)) {\n            continue;\n        }\n        const frameRect = frame.getBoundingClientRect();\n        const [frameTop, frameRight, frameBottom, frameLeft] = getFrameViewport(frame, frameRect);\n        const eAlignH = mapNearest(alignH, frameLeft, frameRight, frame.clientWidth, left, right, right - left);\n        const eAlignV = mapNearest(alignV, frameTop, frameBottom, frame.clientHeight, top, bottom, bottom - top);\n        const diffX = eAlignH === null ? 0 : calcAlignEdge(eAlignH, left, right) - calcAlignEdge(eAlignH, frameLeft, frameRight);\n        const diffY = eAlignV === null ? 0 : calcAlignEdge(eAlignV, top, bottom) - calcAlignEdge(eAlignV, frameTop, frameBottom);\n        const moveX = isXReversed(frameStyle)\n            ? clamp(diffX, -frame.scrollWidth + frame.clientWidth - frame.scrollLeft, -frame.scrollLeft)\n            : clamp(diffX, -frame.scrollLeft, frame.scrollWidth - frame.clientWidth - frame.scrollLeft);\n        const moveY = clamp(diffY, -frame.scrollTop, frame.scrollHeight - frame.clientHeight - frame.scrollTop);\n        actions.push([\n            frame,\n            { left: frame.scrollLeft + moveX, top: frame.scrollTop + moveY, behavior: options.behavior },\n        ]);\n        top = Math.max(top - moveY, frameTop);\n        right = Math.min(right - moveX, frameRight);\n        bottom = Math.min(bottom - moveY, frameBottom);\n        left = Math.max(left - moveX, frameLeft);\n    }\n    return actions;\n};\nconst scrollIntoView = (element, scrollIntoViewOptions, config) => {\n    const options = scrollIntoViewOptions || {};\n    if (!checkBehavior(options.behavior)) {\n        throw new TypeError(failedExecuteInvalidEnumValue(\"scrollIntoView\", \"Element\", options.behavior));\n    }\n    const actions = computeScrollIntoView(element, options);\n    actions.forEach(([frame, scrollToOptions]) => {\n        elementScroll(frame, scrollToOptions, config);\n    });\n};\nconst elementScrollIntoView = scrollIntoView;\n//# sourceMappingURL=scrollIntoView.js.map\n;// CONCATENATED MODULE: ./src/modules/smothScroll.js\n\r\n\r\nconst smothScroll = () => {\r\n   const getNav = document.querySelector('.menu-list');\r\n   const mainScroll = document.querySelector('.main__scroll');\r\n\r\n   const goSection = target => {\r\n      const getId = target.getAttribute('href').slice(1);\r\n      const getSection = document.getElementById(getId);\r\n      if (getSection) {\r\n         elementScrollIntoView(getSection, { behavior: \"smooth\", block: \"center\", inline: \"center\" });\r\n      }\r\n   };\r\n   const activeLink = (e) => {\r\n      e.preventDefault();\r\n      const target = e.target;\r\n      if (target.closest('.menu-list__item')) {\r\n         const getParent = target.closest('.menu-list__item');\r\n         const getLink = getParent.querySelector('.menu-list__link');\r\n         goSection(getLink);\r\n      }\r\n   };\r\n\r\n   getNav.addEventListener('click', activeLink);\r\n   mainScroll.addEventListener('click', e => {\r\n      e.preventDefault();\r\n      goSection(mainScroll);\r\n   });\r\n};\r\n/* harmony default export */ const modules_smothScroll = (smothScroll);\n;// CONCATENATED MODULE: ./src/modules/tabs.js\nconst tabs = () => {\r\n   const designList = document.querySelector('.design-list');\r\n   const getTabs = document.querySelectorAll('.design-list__item');\r\n   const tabsDescription = document.querySelectorAll('.design__descr');\r\n   const designBlock = document.querySelectorAll('.design-block > img');\r\n   const designImg = document.querySelectorAll('.design-images');\r\n   const designTitle = document.querySelectorAll('.design__title');\r\n\r\n   let activeTarget = '';\r\n\r\n   const activeTab = e => {\r\n      e.preventDefault();\r\n      const target = e.target;\r\n      const activeBlock = selector => {\r\n         selector.forEach(item => {\r\n            item.dataset.tabsField === activeTarget ?\r\n               item.classList.remove('hidden') :\r\n               item.classList.add('hidden');\r\n         });\r\n      };\r\n      if (target.closest('.design-list__item') && !target.closest('.design-list__item_active')) {\r\n         getTabs.forEach(item => item.classList.remove('design-list__item_active'));\r\n         target.classList.add('design-list__item_active');\r\n         activeTarget = target.dataset.tabsHandler;\r\n         designTitle.forEach((item, index) => {\r\n            if (index === [...getTabs].indexOf(target)) {\r\n               item.classList.remove('hidden');\r\n               document.querySelector(\"title\").textContent = item.textContent;\r\n            } else {\r\n               item.classList.add('hidden');\r\n            }\r\n         });\r\n\r\n         activeBlock(tabsDescription);\r\n         activeBlock(designImg);\r\n         activeBlock(designBlock);\r\n      }\r\n   };\r\n\r\n   designList.addEventListener('click', activeTab);\r\n};\r\n\r\n/* harmony default export */ const modules_tabs = (tabs);\n;// CONCATENATED MODULE: ./src/modules/mainForm.js\n\r\n\r\nconst mainForm = () => {\r\n   const formButton = document.querySelector('.form__button');\r\n   const form = document.querySelector('.form-test-drive');\r\n   const getInputs = document.querySelectorAll('.form-test-drive > input');\r\n\r\n   const sendForm = async e => {\r\n      await console.log(modules_checkForm(e, form, [...getInputs]));\r\n   };\r\n   formButton.addEventListener('click', sendForm);\r\n};\r\n/* harmony default export */ const modules_mainForm = (mainForm);\n;// CONCATENATED MODULE: ./src/index.js\n\r\n\r\n\r\n\r\n\r\n\r\n\r\n\r\nmodules_tabs();\r\nmodules_menu();\r\nmodules_smothScroll();\r\nmodules_accordeon();\r\nmodules_countTimer('31 march 2022');\r\nmodules_modal();\r\nmodules_mainForm();\r\n\r\ndocument.getElementById('contacts').style.paddingBottom = '100px';//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///240\n")}},__webpack_exports__={};__webpack_modules__[240]()})();